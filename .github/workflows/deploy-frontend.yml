# This is a basic workflow to help you get started with Actions

name: deploy and Release frontend

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
    paths:
      - "frontend/**"

  pull_request:
    types: [opened, reopened, synchronize]
    paths:
      - "frontend/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: cache-test
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./**/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"
      - run: yarn add --dev tailwindcss
      - run: yarn tw.release

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          override: true
          components: rustfmt, clippy

      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -p want-this-frontend -- --check

      - name: cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -p want-this-frontend

      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release -p want-this-frontend --all-features

  build-frontend:
    if: ${{ github.event_name == 'push' }}
    needs: [test]

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      # いらないんじゃないか説
      # - uses: actions/cache@v3
      #   id: cache-cargo
      #   with:
      #     path: |
      #       ~/.cargo/bin/
      #       ~/.cargo/registry/index/
      #       ~/.cargo/registry/cache/
      #       ~/.cargo/git/db/
      #       ./**/target
      #     key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions/cache@v3
        id: cache-frontend
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./frontend/dist/
            ./**/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-frontend

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "yarn"
      - run: yarn add --dev tailwindcss
      - run: yarn tw.release

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true

      - name: install trunk and wasm-bindgen-cli
        if: steps.cache-frontend.outputs.cache-hit != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: trunk wasm-bindgen-cli

      - name: build
        run: |
          trunk build --release

      - uses: actions/upload-artifact@v3
        with:
          name: frontend-artifact
          path: frontend/dist

  deploy:
    needs: [build-frontend]

    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: frontend-artifact
          path: ./target-frontend

      - name: deploy to frontend
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          ARGS: "-rltgoDzvO --rsync-path='sudo rsync'"
          SOURCE: "target-frontend/"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
          TARGET: ${{ secrets.REMOTE_FRONTEND_TARGET }}

      - name: Bump version and push tag
        uses: mathieudutour/github-tag-action@v6.0
        id: tag_version
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: create release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          draft: false
          prerelease: false
          body: ${{ steps.tag_version.outputs.changelog }}

      - name: Discord notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: "{{ EVENT_PAYLOAD.repository.full_name }} frontend has been deployed."
