# This is a basic workflow to help you get started with Actions

name: deploy and Release backend

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
    paths:
      - "backend/**"

  pull_request:
    types: [opened, reopened, synchronize]
    paths:
      - "backend/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test:
    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./**/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: decode secrets file .env
        env:
          DOTEND_ENCODE: ${{ secrets.TEST_DOTENV }}

        run: |
          echo $DOTEND_ENCODE | base64 --decode > .env

      - name: setup mariadb and redis
        run: |
          docker-compose -f docker-compose.test.yml build
          docker-compose -f docker-compose.test.yml up -d

      - name: Wait Database
        run: |
          docker-compose -f docker-compose.test.yml run wait db:3306 -- echo "MariaDB is up"

      - name: migration mariadb
        run: |
          source .env
          wget https://github.com/k0kubun/sqldef/releases/download/v0.11.59/mysqldef_linux_amd64.tar.gz
          tar -zxvf mysqldef_linux_amd64.tar.gz
          ./mysqldef -u $MARIADB_USER -p $MARIADB_PASSWORD $MARIADB_DATABASE < sql/migration.sql

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          override: true
          components: rustfmt, clippy

      - name: cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -p want-this-frontend -- --check

      - name: cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -p want-this-frontend

      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release -p want-this-frontend --all-features

  # This workflow contains a single job called "build"
  build-backend:
    if: ${{ github.event_name == 'push' }}
    needs: [test]
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # いらないんじゃないか説
      # - uses: actions/cache@v3
      #   id: cache-cargo
      #   with:
      #     path: |
      #       ~/.cargo/bin/
      #       ~/.cargo/registry/index/
      #       ~/.cargo/registry/cache/
      #       ~/.cargo/git/db/
      #       ./**/target
      #     key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions/cache@v3
        id: cache-backend
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./**/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-backend

      - name: decode secrets file .env
        env:
          DOTEND_ENCODE: ${{ secrets.TEST_DOTENV }}

        run: |
          echo $DOTEND_ENCODE | base64 --decode > .env

      - name: setup mariadb and redis
        run: |
          docker-compose -f docker-compose.test.yml build
          docker-compose -f docker-compose.test.yml up -d

      - name: Wait Database
        run: |
          docker-compose -f docker-compose.test.yml run wait db:3306 -- echo "MariaDB is up"

      - name: migration mariadb
        run: |
          source .env
          wget https://github.com/k0kubun/sqldef/releases/download/v0.11.59/mysqldef_linux_amd64.tar.gz
          tar -zxvf mysqldef_linux_amd64.tar.gz
          ./mysqldef -u $MARIADB_USER -p $MARIADB_PASSWORD $MARIADB_DATABASE < sql/migration.sql

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-unknown-linux-gnu
          override: true

      - name: install gcc-aarch64-linux-gnu
        run: |
          sudo apt install -y gcc-aarch64-linux-gnu

      - name: build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target aarch64-unknown-linux-gnu -p want-this-backend

      - uses: actions/upload-artifact@v3
        with:
          name: backend-artifact
          path: target/aarch64-unknown-linux-gnu/release/want-this-backend

  deploy:
    needs: [build-backend]

    runs-on: ubuntu-20.04

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: backend-artifact
          path: ./target-backend

      - name: decode secrets file .env
        env:
          DOTEND_ENCODE: ${{ secrets.DEPLOY_DOTENV }}
        run: |
          echo $DOTEND_ENCODE | base64 --decode > target-backend/.env
          cp target-backend/.env sql/

      - name: deploy to backend
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          ARGS: "-rltgoDzvO --rsync-path='sudo rsync'"
          SOURCE: "target-backend/"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
          TARGET: ${{ secrets.REMOTE_BACKEND_TARGET }}

      - name: migration file to backend
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          ARGS: "-rltgoDzvO --rsync-path='sudo rsync'"
          SOURCE: "sql/"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
          TARGET: "~/.tmp"

      - name: restart service
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.REMOTE_PORT }}
          script: |
            sudo systemctl stop want-this-backend.service
            source ~/.tmp/.env
            wget https://github.com/k0kubun/sqldef/releases/download/v0.11.59/mysqldef_linux_arm64.tar.gz
            tar -zxvf mysqldef_linux_arm64.tar.gz
            ~/mysqldef -u $MARIADB_USER -h $MARIADB_ADDRESS -P $MARIADB_PORT -p $MARIADB_PASSWORD $MARIADB_DATABASE < ~/.tmp/migration.sql
            sudo systemctl start want-this-backend.service

      - name: Bump version and push tag
        uses: mathieudutour/github-tag-action@v6.0
        id: tag_version
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: create release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          draft: false
          prerelease: false
          body: ${{ steps.tag_version.outputs.changelog }}

      - name: Discord notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: "{{ EVENT_PAYLOAD.repository.full_name }} backend has been deployed."
